"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pinata";
exports.ids = ["vendor-chunks/pinata"];
exports.modules = {

/***/ "(ssr)/./node_modules/pinata/dist/chunk-ME652TQB.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/pinata/dist/chunk-ME652TQB.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationError: () => (/* binding */ AuthenticationError),\n/* harmony export */   NetworkError: () => (/* binding */ NetworkError),\n/* harmony export */   PinataError: () => (/* binding */ PinataError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError),\n/* harmony export */   containsCID: () => (/* binding */ containsCID),\n/* harmony export */   convertToDesiredGateway: () => (/* binding */ convertToDesiredGateway),\n/* harmony export */   formatConfig: () => (/* binding */ formatConfig),\n/* harmony export */   getFileIdFromUrl: () => (/* binding */ getFileIdFromUrl)\n/* harmony export */ });\n// src/utils/custom-errors.ts\nvar PinataError = class extends Error {\n  constructor(message, statusCode, details) {\n    super(message);\n    this.statusCode = statusCode;\n    this.details = details;\n    this.name = \"PinataError\";\n  }\n};\nvar NetworkError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"NetworkError\";\n  }\n};\nvar AuthenticationError = class extends PinataError {\n  constructor(message, statusCode, details) {\n    super(message, statusCode, details);\n    this.name = \"AuthenticationError\";\n  }\n};\nvar ValidationError = class extends PinataError {\n  constructor(message, details) {\n    super(message, void 0, details);\n    this.name = \"ValidationError\";\n  }\n};\n\n// src/utils/gateway-tools.ts\nfunction isValidCIDv0(cid) {\n  return /^Qm[1-9A-HJ-NP-Za-km-z]{44}$/.test(cid);\n}\nfunction isValidCIDv1(cid) {\n  return /^b[a-z2-7]{58,}$/.test(cid);\n}\nfunction isCID(str) {\n  str = str.trim();\n  return isValidCIDv0(str) || isValidCIDv1(str);\n}\nasync function containsCID(input) {\n  if (typeof input !== \"string\") {\n    throw new Error(\"Input is not a string\");\n  }\n  const startsWithCID = (str) => {\n    const parts = str.split(\"/\");\n    return isCID(parts[0]) ? parts[0] : null;\n  };\n  const directCID = startsWithCID(input);\n  if (directCID) {\n    return {\n      containsCid: true,\n      cid: directCID\n    };\n  }\n  let url;\n  try {\n    url = new URL(input);\n  } catch (error) {\n    const parts = input.split(/\\/|\\?/);\n    for (const part of parts) {\n      const cid = startsWithCID(part);\n      if (cid) {\n        return {\n          containsCid: true,\n          cid\n        };\n      }\n    }\n    return {\n      containsCid: false,\n      cid: null\n    };\n  }\n  const subdomains = url.hostname.split(\".\");\n  for (const subdomain of subdomains) {\n    if (isCID(subdomain)) {\n      return {\n        containsCid: true,\n        cid: subdomain\n      };\n    }\n  }\n  const pathParts = url.pathname.split(\"/\");\n  for (const part of pathParts) {\n    const cid = startsWithCID(part);\n    if (cid) {\n      return {\n        containsCid: true,\n        cid\n      };\n    }\n  }\n  return {\n    containsCid: false,\n    cid: null\n  };\n}\nasync function convertToDesiredGateway(sourceUrl, desiredGatewayPrefix) {\n  const results = await containsCID(sourceUrl);\n  if (results.containsCid !== true) {\n    throw new Error(\"url does not contain CID\");\n  }\n  if (!sourceUrl.startsWith(\"https\") && !sourceUrl.startsWith(\"ipfs://\")) {\n    return `${desiredGatewayPrefix}/ipfs/${sourceUrl}`;\n  }\n  const urlObj = new URL(sourceUrl);\n  const path = urlObj.pathname + urlObj.search + urlObj.hash;\n  if (sourceUrl.startsWith(`ipfs://${results.cid}`)) {\n    return `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n  }\n  if (sourceUrl.includes(`/ipfs/${results.cid}`)) {\n    return `${desiredGatewayPrefix}${path}`;\n  }\n  if (sourceUrl.includes(`/ipns/${results.cid}`)) {\n    return `${desiredGatewayPrefix}${path}`;\n  }\n  if (urlObj.hostname.includes(results.cid)) {\n    return `${desiredGatewayPrefix}/ipfs/${results.cid}${path}`;\n  }\n  throw new Error(\n    \"unsupported URL pattern, please submit a github issue with the URL utilized\"\n  );\n}\n\n// src/utils/resumable.ts\nfunction getFileIdFromUrl(url) {\n  const match = url.match(/\\/files\\/([^\\/]+)/);\n  if (match && match[1]) {\n    return match[1];\n  }\n  throw new NetworkError(\"File ID not found in URL\", 400, {\n    error: \"File ID not found in URL\",\n    code: \"HTTP_ERROR\",\n    metadata: {\n      requestUrl: url\n    }\n  });\n}\n\n// src/utils/format-config.ts\nvar formatConfig = (config) => {\n  let gateway = config?.pinataGateway;\n  if (config && gateway) {\n    if (gateway && !gateway.startsWith(\"https://\")) {\n      gateway = `https://${gateway}`;\n    }\n    config.pinataGateway = gateway;\n  }\n  return config;\n};\n\n\n//# sourceMappingURL=chunk-ME652TQB.mjs.map\n//# sourceMappingURL=chunk-ME652TQB.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvcGluYXRhL2Rpc3QvY2h1bmstTUU2NTJUUUIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxrQ0FBa0MsR0FBRztBQUNyQztBQUNBO0FBQ0EscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQixRQUFRLFVBQVU7QUFDckQ7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFlBQVk7QUFDakQsY0FBYyxxQkFBcUIsUUFBUSxZQUFZLEVBQUUsS0FBSztBQUM5RDtBQUNBLGtDQUFrQyxZQUFZO0FBQzlDLGNBQWMscUJBQXFCLEVBQUUsS0FBSztBQUMxQztBQUNBLGtDQUFrQyxZQUFZO0FBQzlDLGNBQWMscUJBQXFCLEVBQUUsS0FBSztBQUMxQztBQUNBO0FBQ0EsY0FBYyxxQkFBcUIsUUFBUSxZQUFZLEVBQUUsS0FBSztBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLFFBQVE7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFaUo7QUFDako7QUFDQSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxVU0VSXFxGaWxlRGF0YVxcZnJvbnRlbmRcXG5vZGVfbW9kdWxlc1xccGluYXRhXFxkaXN0XFxjaHVuay1NRTY1MlRRQi5tanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gc3JjL3V0aWxzL2N1c3RvbS1lcnJvcnMudHNcbnZhciBQaW5hdGFFcnJvciA9IGNsYXNzIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXNDb2RlLCBkZXRhaWxzKSB7XG4gICAgc3VwZXIobWVzc2FnZSk7XG4gICAgdGhpcy5zdGF0dXNDb2RlID0gc3RhdHVzQ29kZTtcbiAgICB0aGlzLmRldGFpbHMgPSBkZXRhaWxzO1xuICAgIHRoaXMubmFtZSA9IFwiUGluYXRhRXJyb3JcIjtcbiAgfVxufTtcbnZhciBOZXR3b3JrRXJyb3IgPSBjbGFzcyBleHRlbmRzIFBpbmF0YUVycm9yIHtcbiAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzQ29kZSwgZGV0YWlscykge1xuICAgIHN1cGVyKG1lc3NhZ2UsIHN0YXR1c0NvZGUsIGRldGFpbHMpO1xuICAgIHRoaXMubmFtZSA9IFwiTmV0d29ya0Vycm9yXCI7XG4gIH1cbn07XG52YXIgQXV0aGVudGljYXRpb25FcnJvciA9IGNsYXNzIGV4dGVuZHMgUGluYXRhRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXNDb2RlLCBkZXRhaWxzKSB7XG4gICAgc3VwZXIobWVzc2FnZSwgc3RhdHVzQ29kZSwgZGV0YWlscyk7XG4gICAgdGhpcy5uYW1lID0gXCJBdXRoZW50aWNhdGlvbkVycm9yXCI7XG4gIH1cbn07XG52YXIgVmFsaWRhdGlvbkVycm9yID0gY2xhc3MgZXh0ZW5kcyBQaW5hdGFFcnJvciB7XG4gIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMpIHtcbiAgICBzdXBlcihtZXNzYWdlLCB2b2lkIDAsIGRldGFpbHMpO1xuICAgIHRoaXMubmFtZSA9IFwiVmFsaWRhdGlvbkVycm9yXCI7XG4gIH1cbn07XG5cbi8vIHNyYy91dGlscy9nYXRld2F5LXRvb2xzLnRzXG5mdW5jdGlvbiBpc1ZhbGlkQ0lEdjAoY2lkKSB7XG4gIHJldHVybiAvXlFtWzEtOUEtSEotTlAtWmEta20tel17NDR9JC8udGVzdChjaWQpO1xufVxuZnVuY3Rpb24gaXNWYWxpZENJRHYxKGNpZCkge1xuICByZXR1cm4gL15iW2EtejItN117NTgsfSQvLnRlc3QoY2lkKTtcbn1cbmZ1bmN0aW9uIGlzQ0lEKHN0cikge1xuICBzdHIgPSBzdHIudHJpbSgpO1xuICByZXR1cm4gaXNWYWxpZENJRHYwKHN0cikgfHwgaXNWYWxpZENJRHYxKHN0cik7XG59XG5hc3luYyBmdW5jdGlvbiBjb250YWluc0NJRChpbnB1dCkge1xuICBpZiAodHlwZW9mIGlucHV0ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiSW5wdXQgaXMgbm90IGEgc3RyaW5nXCIpO1xuICB9XG4gIGNvbnN0IHN0YXJ0c1dpdGhDSUQgPSAoc3RyKSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSBzdHIuc3BsaXQoXCIvXCIpO1xuICAgIHJldHVybiBpc0NJRChwYXJ0c1swXSkgPyBwYXJ0c1swXSA6IG51bGw7XG4gIH07XG4gIGNvbnN0IGRpcmVjdENJRCA9IHN0YXJ0c1dpdGhDSUQoaW5wdXQpO1xuICBpZiAoZGlyZWN0Q0lEKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5zQ2lkOiB0cnVlLFxuICAgICAgY2lkOiBkaXJlY3RDSURcbiAgICB9O1xuICB9XG4gIGxldCB1cmw7XG4gIHRyeSB7XG4gICAgdXJsID0gbmV3IFVSTChpbnB1dCk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc3QgcGFydHMgPSBpbnB1dC5zcGxpdCgvXFwvfFxcPy8pO1xuICAgIGZvciAoY29uc3QgcGFydCBvZiBwYXJ0cykge1xuICAgICAgY29uc3QgY2lkID0gc3RhcnRzV2l0aENJRChwYXJ0KTtcbiAgICAgIGlmIChjaWQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb250YWluc0NpZDogdHJ1ZSxcbiAgICAgICAgICBjaWRcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRhaW5zQ2lkOiBmYWxzZSxcbiAgICAgIGNpZDogbnVsbFxuICAgIH07XG4gIH1cbiAgY29uc3Qgc3ViZG9tYWlucyA9IHVybC5ob3N0bmFtZS5zcGxpdChcIi5cIik7XG4gIGZvciAoY29uc3Qgc3ViZG9tYWluIG9mIHN1YmRvbWFpbnMpIHtcbiAgICBpZiAoaXNDSUQoc3ViZG9tYWluKSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29udGFpbnNDaWQ6IHRydWUsXG4gICAgICAgIGNpZDogc3ViZG9tYWluXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICBjb25zdCBwYXRoUGFydHMgPSB1cmwucGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuICBmb3IgKGNvbnN0IHBhcnQgb2YgcGF0aFBhcnRzKSB7XG4gICAgY29uc3QgY2lkID0gc3RhcnRzV2l0aENJRChwYXJ0KTtcbiAgICBpZiAoY2lkKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250YWluc0NpZDogdHJ1ZSxcbiAgICAgICAgY2lkXG4gICAgICB9O1xuICAgIH1cbiAgfVxuICByZXR1cm4ge1xuICAgIGNvbnRhaW5zQ2lkOiBmYWxzZSxcbiAgICBjaWQ6IG51bGxcbiAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGNvbnZlcnRUb0Rlc2lyZWRHYXRld2F5KHNvdXJjZVVybCwgZGVzaXJlZEdhdGV3YXlQcmVmaXgpIHtcbiAgY29uc3QgcmVzdWx0cyA9IGF3YWl0IGNvbnRhaW5zQ0lEKHNvdXJjZVVybCk7XG4gIGlmIChyZXN1bHRzLmNvbnRhaW5zQ2lkICE9PSB0cnVlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwidXJsIGRvZXMgbm90IGNvbnRhaW4gQ0lEXCIpO1xuICB9XG4gIGlmICghc291cmNlVXJsLnN0YXJ0c1dpdGgoXCJodHRwc1wiKSAmJiAhc291cmNlVXJsLnN0YXJ0c1dpdGgoXCJpcGZzOi8vXCIpKSB7XG4gICAgcmV0dXJuIGAke2Rlc2lyZWRHYXRld2F5UHJlZml4fS9pcGZzLyR7c291cmNlVXJsfWA7XG4gIH1cbiAgY29uc3QgdXJsT2JqID0gbmV3IFVSTChzb3VyY2VVcmwpO1xuICBjb25zdCBwYXRoID0gdXJsT2JqLnBhdGhuYW1lICsgdXJsT2JqLnNlYXJjaCArIHVybE9iai5oYXNoO1xuICBpZiAoc291cmNlVXJsLnN0YXJ0c1dpdGgoYGlwZnM6Ly8ke3Jlc3VsdHMuY2lkfWApKSB7XG4gICAgcmV0dXJuIGAke2Rlc2lyZWRHYXRld2F5UHJlZml4fS9pcGZzLyR7cmVzdWx0cy5jaWR9JHtwYXRofWA7XG4gIH1cbiAgaWYgKHNvdXJjZVVybC5pbmNsdWRlcyhgL2lwZnMvJHtyZXN1bHRzLmNpZH1gKSkge1xuICAgIHJldHVybiBgJHtkZXNpcmVkR2F0ZXdheVByZWZpeH0ke3BhdGh9YDtcbiAgfVxuICBpZiAoc291cmNlVXJsLmluY2x1ZGVzKGAvaXBucy8ke3Jlc3VsdHMuY2lkfWApKSB7XG4gICAgcmV0dXJuIGAke2Rlc2lyZWRHYXRld2F5UHJlZml4fSR7cGF0aH1gO1xuICB9XG4gIGlmICh1cmxPYmouaG9zdG5hbWUuaW5jbHVkZXMocmVzdWx0cy5jaWQpKSB7XG4gICAgcmV0dXJuIGAke2Rlc2lyZWRHYXRld2F5UHJlZml4fS9pcGZzLyR7cmVzdWx0cy5jaWR9JHtwYXRofWA7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIFwidW5zdXBwb3J0ZWQgVVJMIHBhdHRlcm4sIHBsZWFzZSBzdWJtaXQgYSBnaXRodWIgaXNzdWUgd2l0aCB0aGUgVVJMIHV0aWxpemVkXCJcbiAgKTtcbn1cblxuLy8gc3JjL3V0aWxzL3Jlc3VtYWJsZS50c1xuZnVuY3Rpb24gZ2V0RmlsZUlkRnJvbVVybCh1cmwpIHtcbiAgY29uc3QgbWF0Y2ggPSB1cmwubWF0Y2goL1xcL2ZpbGVzXFwvKFteXFwvXSspLyk7XG4gIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgIHJldHVybiBtYXRjaFsxXTtcbiAgfVxuICB0aHJvdyBuZXcgTmV0d29ya0Vycm9yKFwiRmlsZSBJRCBub3QgZm91bmQgaW4gVVJMXCIsIDQwMCwge1xuICAgIGVycm9yOiBcIkZpbGUgSUQgbm90IGZvdW5kIGluIFVSTFwiLFxuICAgIGNvZGU6IFwiSFRUUF9FUlJPUlwiLFxuICAgIG1ldGFkYXRhOiB7XG4gICAgICByZXF1ZXN0VXJsOiB1cmxcbiAgICB9XG4gIH0pO1xufVxuXG4vLyBzcmMvdXRpbHMvZm9ybWF0LWNvbmZpZy50c1xudmFyIGZvcm1hdENvbmZpZyA9IChjb25maWcpID0+IHtcbiAgbGV0IGdhdGV3YXkgPSBjb25maWc/LnBpbmF0YUdhdGV3YXk7XG4gIGlmIChjb25maWcgJiYgZ2F0ZXdheSkge1xuICAgIGlmIChnYXRld2F5ICYmICFnYXRld2F5LnN0YXJ0c1dpdGgoXCJodHRwczovL1wiKSkge1xuICAgICAgZ2F0ZXdheSA9IGBodHRwczovLyR7Z2F0ZXdheX1gO1xuICAgIH1cbiAgICBjb25maWcucGluYXRhR2F0ZXdheSA9IGdhdGV3YXk7XG4gIH1cbiAgcmV0dXJuIGNvbmZpZztcbn07XG5cbmV4cG9ydCB7IEF1dGhlbnRpY2F0aW9uRXJyb3IsIE5ldHdvcmtFcnJvciwgUGluYXRhRXJyb3IsIFZhbGlkYXRpb25FcnJvciwgY29udGFpbnNDSUQsIGNvbnZlcnRUb0Rlc2lyZWRHYXRld2F5LCBmb3JtYXRDb25maWcsIGdldEZpbGVJZEZyb21VcmwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU1FNjUyVFFCLm1qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLU1FNjUyVFFCLm1qcy5tYXAiXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pinata/dist/chunk-ME652TQB.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/pinata/dist/index.mjs":
/*!********************************************!*\
  !*** ./node_modules/pinata/dist/index.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthenticationError: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError),\n/* harmony export */   NetworkError: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError),\n/* harmony export */   PinataError: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError),\n/* harmony export */   PinataSDK: () => (/* binding */ PinataSDK),\n/* harmony export */   ValidationError: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError),\n/* harmony export */   addToGroup: () => (/* binding */ addToGroup),\n/* harmony export */   analyticsDateInterval: () => (/* binding */ analyticsDateInterval),\n/* harmony export */   analyticsTopUsage: () => (/* binding */ analyticsTopUsage),\n/* harmony export */   containsCID: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.containsCID),\n/* harmony export */   convertIPFSUrl: () => (/* binding */ convertIPFSUrl),\n/* harmony export */   convertToDesiredGateway: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.convertToDesiredGateway),\n/* harmony export */   createAccessLink: () => (/* binding */ createAccessLink),\n/* harmony export */   createGroup: () => (/* binding */ createGroup),\n/* harmony export */   createKey: () => (/* binding */ createKey),\n/* harmony export */   createSignedUploadURL: () => (/* binding */ createSignedUploadURL),\n/* harmony export */   deleteFile: () => (/* binding */ deleteFile),\n/* harmony export */   deleteFileVectors: () => (/* binding */ deleteFileVectors),\n/* harmony export */   deleteGroup: () => (/* binding */ deleteGroup),\n/* harmony export */   deletePinRequest: () => (/* binding */ deletePinRequest),\n/* harmony export */   deleteSwap: () => (/* binding */ deleteSwap),\n/* harmony export */   formatConfig: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig),\n/* harmony export */   getCid: () => (/* binding */ getCid),\n/* harmony export */   getFileIdFromUrl: () => (/* reexport safe */ _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.getFileIdFromUrl),\n/* harmony export */   getGroup: () => (/* binding */ getGroup),\n/* harmony export */   listFiles: () => (/* binding */ listFiles),\n/* harmony export */   listGroups: () => (/* binding */ listGroups),\n/* harmony export */   listKeys: () => (/* binding */ listKeys),\n/* harmony export */   pinnedFileCount: () => (/* binding */ pinnedFileCount),\n/* harmony export */   queue: () => (/* binding */ queue),\n/* harmony export */   removeFromGroup: () => (/* binding */ removeFromGroup),\n/* harmony export */   revokeKeys: () => (/* binding */ revokeKeys),\n/* harmony export */   swapCid: () => (/* binding */ swapCid),\n/* harmony export */   swapHistory: () => (/* binding */ swapHistory),\n/* harmony export */   testAuthentication: () => (/* binding */ testAuthentication),\n/* harmony export */   totalStorageUsage: () => (/* binding */ totalStorageUsage),\n/* harmony export */   updateFile: () => (/* binding */ updateFile),\n/* harmony export */   updateGroup: () => (/* binding */ updateGroup),\n/* harmony export */   uploadBase64: () => (/* binding */ uploadBase64),\n/* harmony export */   uploadCid: () => (/* binding */ uploadCid),\n/* harmony export */   uploadFile: () => (/* binding */ uploadFile),\n/* harmony export */   uploadFileArray: () => (/* binding */ uploadFileArray),\n/* harmony export */   uploadJson: () => (/* binding */ uploadJson),\n/* harmony export */   uploadUrl: () => (/* binding */ uploadUrl),\n/* harmony export */   vectorizeFile: () => (/* binding */ vectorizeFile),\n/* harmony export */   vectorizeQuery: () => (/* binding */ vectorizeQuery)\n/* harmony export */ });\n/* harmony import */ var _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-ME652TQB.mjs */ \"(ssr)/./node_modules/pinata/dist/chunk-ME652TQB.mjs\");\n\n\n\n// src/core/functions/analytics/analyticsDateInterval.ts\nvar analyticsDateInterval = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      date_interval,\n      sort_by\n    } = options;\n    if (cid) params.append(\"cid\", cid);\n    if (gateway_domain) params.append(\"gateway_domain\", gateway_domain);\n    if (start_date) params.append(\"start_date\", start_date);\n    if (end_date) params.append(\"end_date\", end_date);\n    if (file_name) params.append(\"file_name\", file_name);\n    if (user_agent) params.append(\"user_agent\", user_agent.toString());\n    if (country) params.append(\"country\", country.toString());\n    if (region) params.append(\"region\", region);\n    if (referer) params.append(\"referer\", referer.toString());\n    if (limit) params.append(\"limit\", limit.toString());\n    if (sort_order) params.append(\"sort_order\", sort_order);\n    if (sort_by) params.append(\"sort_by\", sort_by);\n    if (date_interval) params.append(\"by\", date_interval);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/ipfs/gateway_analytics_time_series?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsDateInterval\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/functions/analytics/analyticsTopUsage.ts\nvar analyticsTopUsage = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      cid,\n      gateway_domain,\n      start_date,\n      end_date,\n      file_name,\n      user_agent,\n      country,\n      region,\n      referer,\n      limit,\n      sort_order,\n      sort_by,\n      attribute\n    } = options;\n    const domain = gateway_domain || config.pinataGateway;\n    if (domain) {\n      const cleanDomain = domain.replace(/^https?:\\/\\//, \"\");\n      params.append(\"gateway_domain\", cleanDomain);\n    }\n    if (cid) {\n      params.append(\"cid\", cid);\n    }\n    if (start_date) params.append(\"start_date\", start_date);\n    if (end_date) params.append(\"end_date\", end_date);\n    if (file_name) params.append(\"file_name\", file_name);\n    if (user_agent) params.append(\"user_agent\", user_agent.toString());\n    if (country) params.append(\"country\", country.toString());\n    if (region) params.append(\"region\", region);\n    if (referer) params.append(\"referer\", referer.toString());\n    if (limit) params.append(\"limit\", limit.toString());\n    if (sort_order) params.append(\"sort_order\", sort_order);\n    if (sort_by) params.append(\"sort_by\", sort_by);\n    if (attribute) params.append(\"by\", attribute);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/ipfs/gateway_analytics_top?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = { ...config.customHeaders };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/analyticsTopUsage\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing anaytics usage: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while fetching gateway usage\"\n    );\n  }\n};\n\n// src/core/functions/authentication/testAuthentication.ts\nvar testAuthentication = async (config) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/testAuthentication\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/testAuthentication`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing authentication: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while testing authentication\"\n    );\n  }\n};\n\n// src/core/functions/files/delete.ts\nvar wait = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar deleteFile = async (config, files, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/deleteFile\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of files) {\n    try {\n      const response = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n        method: \"DELETE\",\n        headers\n      });\n      await wait(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            {\n              error: errorData,\n              code: \"HTTP_ERROR\",\n              metadata: {\n                requestUrl: response.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error`, response.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: response.url\n          }\n        });\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error deleting file ${id}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while deleting file ${id}`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/functions/files/deleteFileVectors.ts\nvar deleteFileVectors = async (config, fileId) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/vectorizeFile\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing vectorize file: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while vectorizing file\");\n  }\n};\n\n// src/core/functions/files/deleteSwap.ts\nvar deleteSwap = async (config, cid, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteSwap\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/${network}/swap/${cid}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(`Authentication failed`, request.status, {\n          error: errorData,\n          code: \"AUTH_ERROR\"\n        });\n      }\n      if (request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n          \"Unauthorized CID Swap Deletion\",\n          request.status,\n          {\n            error: errorData,\n            code: \"UNAUTHORIZED\"\n          }\n        );\n      }\n      if (request.status === 404) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"CID not pinned to account\", request.status, {\n          error: errorData,\n          code: \"NOT_FOUND\"\n        });\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error occurred`, request.status, {\n        error: errorData,\n        code: \"NETWORK_ERROR\"\n      });\n    }\n    return request.statusText;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing deleteSwap: ${error.message}`,\n        void 0,\n        {\n          code: \"DELETE_SWAP_ERROR\"\n        }\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while deleting swap\",\n      void 0,\n      {\n        code: \"UNKNOWN_ERROR\"\n      }\n    );\n  }\n};\n\n// src/core/functions/files/list.ts\nvar listFiles = async (config, privacy, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const {\n      name,\n      group,\n      cid,\n      order,\n      limit,\n      mimeType,\n      pageToken,\n      cidPending,\n      metadata,\n      noGroup\n    } = options;\n    if (limit) params.append(\"limit\", limit.toString());\n    if (name) params.append(\"name\", name);\n    if (group) params.append(\"group\", group);\n    if (cid) params.append(\"cid\", cid);\n    if (mimeType) params.append(\"mimeType\", mimeType);\n    if (order) params.append(\"order\", order);\n    if (pageToken) params.append(\"pageToken\", pageToken);\n    if (cidPending) params.append(\"cidPending\", \"true\");\n    if (noGroup) params.append(\"group\", \"null\");\n    if (metadata && typeof metadata === \"object\") {\n      Object.entries(metadata).forEach(([key, value]) => {\n        params.append(`keyvalues[${key.toString()}]`, value.toString());\n      });\n    }\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/files/${privacy}?${params.toString()}`;\n  try {\n    let headers;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        ...config.customHeaders\n      };\n    } else {\n      headers = {\n        Authorization: `Bearer ${config.pinataJwt}`,\n        Source: \"sdk/listFiles\"\n      };\n    }\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing list files: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while listing files\");\n  }\n};\n\n// src/core/functions/files/pinnedFileUsage.ts\nvar pinnedFileCount = async (config) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/pinnedFileUsage\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.pin_count;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing pinnedFileUsage: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while getting pinned file usage\"\n    );\n  }\n};\n\n// src/core/functions/files/swapCid.ts\nvar swapCid = async (config, options, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    swap_cid: options.swapCid\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapCid\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/${network}/swap/${options.cid}`,\n      {\n        method: \"PUT\",\n        headers,\n        body: data\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      if (request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"Unauthorized CID Swap\", request.status, {\n          error: errorData,\n          code: \"AUTH_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      if (request.status === 404) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"CID not pinned to account\", request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing CID Swap: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while swapping CID\");\n  }\n};\n\n// src/core/functions/files/swapHistory.ts\nvar swapHistory = async (config, options, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/swapHistory\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/${network}/swap/${options.cid}?domain=${options.domain}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      if (request.status === 404) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"CID does not have history\", request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error fetching swap history: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while fetching swap history\"\n    );\n  }\n};\n\n// src/core/functions/files/totalStorageUsage.ts\nvar totalStorageUsage = async (config) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let endpoint = \"https://api.pinata.cloud\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/totalStorageUsage\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/data/userPinnedDataTotal`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.pin_size_total;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing totalStorageUsage: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while getting total storage usage\"\n    );\n  }\n};\n\n// src/core/functions/files/updateFile.ts\nvar updateFile = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  if (!options.name && (!options.keyvalues || Object.keys(options.keyvalues).length === 0)) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\n      \"At least one of 'name' or 'keyvalues' must be provided\"\n    );\n  }\n  const data = {};\n  if (options.name !== void 0) {\n    data.name = options.name;\n  }\n  if (options.keyvalues && Object.keys(options.keyvalues).length > 0) {\n    data.keyvalues = options.keyvalues;\n  }\n  const body = JSON.stringify(data);\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateMetadata\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/${privacy}/${options.id}`, {\n      method: \"PUT\",\n      headers,\n      body\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing updateFile: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while updating file\");\n  }\n};\n\n// src/core/functions/files/vectorizeFile.ts\nvar vectorizeFile = async (config, fileId) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/vectorizeFile\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/vectorize/files/${fileId}`, {\n      method: \"POST\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing vectorize file: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while vectorizing file\");\n  }\n};\n\n// src/core/functions/files/vectorizeQuery.ts\nvar vectorizeQuery = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/vectorQuery\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  const body = JSON.stringify({\n    text: options.query\n  });\n  try {\n    const request = await fetch(\n      `${endpoint}/vectorize/groups/${options.groupId}/query`,\n      {\n        method: \"POST\",\n        headers,\n        body\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    if (options.returnFile) {\n      if (resData.matches.length === 0) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`No files returned in query to fetch`);\n      }\n      const cid = resData.matches[0].cid;\n      const fileRes = await getCid(config, cid, \"files\");\n      return fileRes;\n    }\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing vectorize file: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while vectorizing file\");\n  }\n};\n\n// src/core/functions/files/queue.ts\nvar queue = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const params = new URLSearchParams({\n    includesCount: \"false\"\n  });\n  if (options) {\n    const { cid, status, sort, limit, pageToken } = options;\n    if (cid) params.append(\"cid\", cid.toString());\n    if (status) params.append(\"status\", status.toString());\n    if (sort) params.append(\"sort\", sort.toString());\n    if (limit) params.append(\"limit\", limit.toString());\n    if (pageToken) params.append(\"pageToken\", pageToken.toString());\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  const url = `${endpoint}/files/public/pin_by_cid?${params.toString()}`;\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/pinJobs\"\n    };\n  }\n  try {\n    const request = await fetch(url, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing pinJobs: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while listing pin jobs\");\n  }\n};\n\n// src/core/functions/files/deletePinRequest.ts\nvar deletePinRequest = async (config, id) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/deletePinRequest\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const response = await fetch(`${endpoint}/files/public/pin_by_cid/${id}`, {\n      method: \"DELETE\",\n      headers\n    });\n    if (!response.ok) {\n      const errorData = await response.text();\n      if (response.status === 401) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          response.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: response.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error`, response.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: response.url\n        }\n      });\n    }\n    return \"OK\";\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error deleting pin by request: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while deleting pin by CID request\"\n    );\n  }\n};\n\n// src/core/functions/gateway/getCid.ts\nvar getCid = async (config, cid, gatewayType, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let data;\n  let newUrl = `${config?.pinataGateway}/${gatewayType}/${cid}`;\n  const params = new URLSearchParams();\n  if (options) {\n    if (options.width) params.append(\"img-width\", options.width.toString());\n    if (options.height) params.append(\"img-height\", options.height.toString());\n    if (options.dpr) params.append(\"img-dpr\", options.dpr.toString());\n    if (options.fit) params.append(\"img-fit\", options.fit);\n    if (options.gravity) params.append(\"img-gravity\", options.gravity);\n    if (options.quality)\n      params.append(\"img-quality\", options.quality.toString());\n    if (options.format) params.append(\"img-format\", options.format);\n    if (options.animation !== void 0)\n      params.append(\"img-anim\", options.animation.toString());\n    if (options.sharpen)\n      params.append(\"img-sharpen\", options.sharpen.toString());\n    if (options.onError === true) params.append(\"img-onerror\", \"redirect\");\n    if (options.metadata) params.append(\"img-metadata\", options.metadata);\n  }\n  if (config?.pinataGatewayKey) {\n    params.append(\"pinataGatewayToken\", config.pinataGatewayKey);\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    newUrl += `?${queryString}`;\n  }\n  if (gatewayType === \"ipfs\") {\n    const request = await fetch(newUrl);\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const contentType = request.headers.get(\"content-type\")?.split(\";\")[0] || null;\n    if (contentType?.includes(\"application/json\")) {\n      data = await request.json();\n    } else if (contentType?.includes(\"text/\")) {\n      data = await request.text();\n    } else {\n      data = await request.blob();\n    }\n    const res = {\n      data,\n      contentType\n    };\n    return res;\n  }\n  const date = Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);\n  const payload = JSON.stringify({\n    url: newUrl,\n    date,\n    expires: 30,\n    method: \"GET\"\n  });\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/getCid\"\n    };\n  }\n  const signedUrlRequest = await fetch(`${endpoint}/files/sign`, {\n    method: \"POST\",\n    headers,\n    body: payload\n  });\n  const signedUrl = await signedUrlRequest.json();\n  try {\n    const request = await fetch(signedUrl.data);\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const contentType = request.headers.get(\"content-type\")?.split(\";\")[0] || null;\n    if (contentType?.includes(\"application/json\")) {\n      data = await request.json();\n    } else if (contentType?.includes(\"text/\")) {\n      data = await request.text();\n    } else {\n      data = await request.blob();\n    }\n    const res = {\n      data,\n      contentType\n    };\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing getCid: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while getting CID contents\"\n    );\n  }\n};\n\n// src/core/functions/gateway/convertIPFSUrl.ts\nvar convertIPFSUrl = async (config, url, gatewayPrefix) => {\n  let newUrl;\n  let prefix = gatewayPrefix || config?.pinataGateway || \"https://gateway.pinata.cloud\";\n  newUrl = await (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.convertToDesiredGateway)(url, prefix);\n  if (config?.pinataGatewayKey) {\n    `${newUrl}?pinataGatewayToken=${config?.pinataGatewayKey}`;\n  }\n  return newUrl;\n};\n\n// src/core/functions/gateway/createAccessLink.ts\nvar createAccessLink = async (config, options, imgOpts) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let baseUrl;\n  if (options?.gateway) {\n    baseUrl = options.gateway.startsWith(\"https://\") ? options.gateway : `https://${options.gateway}`;\n  } else {\n    baseUrl = config.pinataGateway;\n  }\n  let newUrl = `${baseUrl}/files/${options.cid}`;\n  const params = new URLSearchParams();\n  if (imgOpts) {\n    if (imgOpts.width) params.append(\"img-width\", imgOpts.width.toString());\n    if (imgOpts.height) params.append(\"img-height\", imgOpts.height.toString());\n    if (imgOpts.dpr) params.append(\"img-dpr\", imgOpts.dpr.toString());\n    if (imgOpts.fit) params.append(\"img-fit\", imgOpts.fit);\n    if (imgOpts.gravity) params.append(\"img-gravity\", imgOpts.gravity);\n    if (imgOpts.quality)\n      params.append(\"img-quality\", imgOpts.quality.toString());\n    if (imgOpts.format) params.append(\"img-format\", imgOpts.format);\n    if (imgOpts.animation !== void 0)\n      params.append(\"img-anim\", imgOpts.animation.toString());\n    if (imgOpts.sharpen)\n      params.append(\"img-sharpen\", imgOpts.sharpen.toString());\n    if (imgOpts.onError === true) params.append(\"img-onerror\", \"redirect\");\n    if (imgOpts.metadata) params.append(\"img-metadata\", imgOpts.metadata);\n  }\n  const queryString = params.toString();\n  if (queryString) {\n    newUrl += `?${queryString}`;\n  }\n  const date = options?.date || Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);\n  const payload = JSON.stringify({\n    url: newUrl,\n    date,\n    expires: options.expires,\n    method: \"GET\"\n  });\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/createSignURL\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/private/download_link`, {\n      method: \"POST\",\n      headers,\n      body: payload\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing createSignedURL: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while getting signed url\");\n  }\n};\n\n// src/core/functions/groups/addToGroup.ts\nvar addToGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const wait3 = (milliseconds) => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, milliseconds);\n    });\n  };\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addToGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of options.files) {\n    try {\n      const response = await fetch(\n        `${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n        {\n          method: \"PUT\",\n          headers\n        }\n      );\n      await wait3(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: response.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, response.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: response.url\n          }\n        });\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error adding file ${id} to group: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while adding file ${id} to group`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/functions/groups/createGroup.ts\nvar createGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    name: options.name,\n    is_public: options.isPublic\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/groups/${privacy}`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing createGroup: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while creating a group\");\n  }\n};\n\n// src/core/functions/groups/deleteGroup.ts\nvar deleteGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/deleteGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/groups/${privacy}/${options.groupId}`,\n      {\n        method: \"DELETE\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = request.statusText;\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing deleteGroup: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while deleting a group\");\n  }\n};\n\n// src/core/functions/groups/getGroup.ts\nvar getGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/groups/${privacy}/${options.groupId}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing getGroup: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while getting info for a group\"\n    );\n  }\n};\n\n// src/core/functions/groups/listGroups.ts\nvar listGroups = async (config, privacy, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listGroups\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { pageToken, name, limit, isPublic } = options;\n    if (pageToken) params.append(\"pageToken\", pageToken.toString());\n    if (isPublic) params.append(\"isPublic\", isPublic.toString());\n    if (name) params.append(\"name\", name);\n    if (limit !== void 0) params.append(\"limit\", limit.toString());\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/groups/${privacy}?${params.toString()}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing listGroups: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while listing groups\");\n  }\n};\n\n// src/core/functions/groups/removeFromGroup.ts\nvar removeFromGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const wait3 = (milliseconds) => {\n    return new Promise((resolve) => {\n      setTimeout(resolve, milliseconds);\n    });\n  };\n  const responses = [];\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addToGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const id of options.files) {\n    try {\n      const response = await fetch(\n        `${endpoint}/groups/${privacy}/${options.groupId}/ids/${id}`,\n        {\n          method: \"DELETE\",\n          headers\n        }\n      );\n      await wait3(300);\n      if (!response.ok) {\n        const errorData = await response.text();\n        if (response.status === 401) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            response.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: response.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, response.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: response.url\n          }\n        });\n      }\n      responses.push({\n        id,\n        status: response.statusText\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error adding file ${id} to group: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while adding file ${id} to group`;\n      }\n      responses.push({\n        id,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/functions/groups/updateGroup.ts\nvar updateGroup = async (config, options, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    name: options.name,\n    is_public: options.isPublic\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/updateGroup\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/groups/${privacy}/${options.groupId}`,\n      {\n        method: \"PUT\",\n        headers,\n        body: data\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing updateGroup: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while updating group\");\n  }\n};\n\n// src/core/functions/keys/createKey.ts\nvar createKey = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/createKey\"\n    };\n  }\n  const data = JSON.stringify(options);\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/pinata/keys`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing createKey: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while creating API key\");\n  }\n};\n\n// src/core/functions/keys/listKeys.ts\nvar listKeys = async (config, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/listKeys\"\n    };\n  }\n  const params = new URLSearchParams();\n  if (options) {\n    const { offset, name, revoked, limitedUse, exhausted } = options;\n    if (offset) params.append(\"offset\", offset.toString());\n    if (revoked !== void 0) params.append(\"revoked\", revoked.toString());\n    if (limitedUse !== void 0)\n      params.append(\"limitedUse\", limitedUse.toString());\n    if (exhausted !== void 0)\n      params.append(\"exhausted\", exhausted.toString());\n    if (name) params.append(\"name\", name);\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/pinata/keys?${params.toString()}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.keys;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing listKeys: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while listing API keys\");\n  }\n};\n\n// src/core/functions/keys/revokeKeys.ts\nvar wait2 = (milliseconds) => {\n  return new Promise((resolve) => {\n    setTimeout(resolve, milliseconds);\n  });\n};\nvar revokeKeys = async (config, keys) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/revokeKeys\"\n    };\n  }\n  const responses = [];\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  for (const key of keys) {\n    try {\n      const request = await fetch(`${endpoint}/pinata/keys/${key}`, {\n        method: \"PUT\",\n        headers\n      });\n      await wait2(300);\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: request.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      const result = await request.json();\n      responses.push({\n        key,\n        status: result\n      });\n    } catch (error) {\n      let errorMessage;\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        errorMessage = error.message;\n      } else if (error instanceof Error) {\n        errorMessage = `Error revoking key ${key}: ${error.message}`;\n      } else {\n        errorMessage = `An unknown error occurred while revoking key ${key}`;\n      }\n      responses.push({\n        key,\n        status: errorMessage\n      });\n    }\n  }\n  return responses;\n};\n\n// src/core/functions/uploads/base64.ts\nvar uploadBase64 = async (config, base64String, network, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const name = options?.metadata?.name ? options?.metadata?.name : \"base64 string\";\n  const buffer = Buffer.from(base64String, \"base64\");\n  const blob = new Blob([buffer]);\n  const data = new FormData();\n  data.append(\"file\", blob, name);\n  data.append(\"network\", network);\n  data.append(\"name\", name);\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/base64\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  if (options?.url) {\n    try {\n      const request = await fetch(options.url, {\n        method: \"POST\",\n        body: data\n      });\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: request.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      const res = await request.json();\n      const resData = res.data;\n      return resData;\n    } catch (error) {\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        throw error;\n      }\n      if (error instanceof Error) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing base64: ${error.message}`);\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        \"An unknown error occurred while trying to upload base64\"\n      );\n    }\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    if (options?.vectorize) {\n      const vectorReq = await fetch(\n        `${endpoint}/vectorize/files/${resData.id}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (vectorReq.ok) {\n        resData.vectorized = true;\n        return resData;\n      } else {\n        const errorData = await vectorReq.text();\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n          `HTTP error during vectorization: ${errorData}`,\n          vectorReq.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n    }\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing base64: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while trying to upload base64\"\n    );\n  }\n};\n\n// src/core/functions/uploads/createSignedUploadURL.ts\nvar createSignedUploadURL = async (config, options, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const date = options?.date || Math.floor((/* @__PURE__ */ new Date()).getTime() / 1e3);\n  const payload = {\n    date,\n    expires: options.expires\n  };\n  if (options.groupId) {\n    payload.group_id = options.groupId;\n  }\n  if (options.name) {\n    payload.filename = options.name;\n  }\n  if (options.keyvalues) {\n    payload.keyvalues = options.keyvalues;\n  }\n  if (network) {\n    payload.network = network;\n  }\n  if (options.streamable) {\n    payload.streamable = options.streamable;\n  }\n  if (options.maxFileSize) {\n    payload.max_file_size = options.maxFileSize;\n  }\n  if (options.mimeTypes) {\n    payload.allow_mime_types = options.mimeTypes;\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${config.pinataJwt}`,\n      Source: \"sdk/createSignURL\"\n    };\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/sign`, {\n      method: \"POST\",\n      headers,\n      cache: \"no-store\",\n      body: JSON.stringify(payload)\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication Failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error processing createSignedURL: ${error.message}`\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while getting signed url\");\n  }\n};\n\n// src/core/functions/uploads/file.ts\nvar uploadFile = async (config, file, network, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config.pinataJwt;\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  if (file.size > 94371840) {\n    let headers2;\n    if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n      headers2 = {\n        Authorization: `Bearer ${jwt}`,\n        ...config.customHeaders\n      };\n    } else {\n      headers2 = {\n        Authorization: `Bearer ${jwt}`,\n        Source: \"sdk/file\"\n      };\n    }\n    const name = options?.metadata?.name || file.name || \"File from SDK\";\n    let metadata = `filename ${btoa(name)},filetype ${btoa(file.type)},network ${btoa(network)}`;\n    if (options?.groupId) {\n      metadata += `,group_id ${btoa(options.groupId)}`;\n    }\n    if (options?.metadata?.keyvalues) {\n      metadata += `,keyvalues ${btoa(JSON.stringify(options.metadata.keyvalues))}`;\n    }\n    if (options?.streamable) {\n      metadata += `,streamable ${btoa(\"true\")}`;\n    }\n    let updatedEndpoint = `${endpoint}/files`;\n    if (options?.url) {\n      updatedEndpoint = options.url;\n    }\n    const urlReq = await fetch(updatedEndpoint, {\n      method: \"POST\",\n      headers: {\n        \"Upload-Length\": `${file.size}`,\n        \"Upload-Metadata\": metadata,\n        ...headers2\n      }\n    });\n    const url = urlReq.headers.get(\"Location\");\n    if (!url) {\n      const errorData = await urlReq.text();\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\"Upload URL not provided\", urlReq.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: urlReq.url,\n          requestHeaders: urlReq.headers\n        }\n      });\n    }\n    const chunkSize = 50 * 1024 * 1024 + 1;\n    const totalChunks = Math.ceil(file.size / chunkSize);\n    let offset = 0;\n    let uploadReq;\n    for (let i = 0; i < totalChunks; i++) {\n      const chunk = file.slice(offset, offset + chunkSize);\n      let retryCount = 0;\n      const maxRetries = 5;\n      while (retryCount <= maxRetries) {\n        try {\n          uploadReq = await fetch(url, {\n            method: \"PATCH\",\n            headers: {\n              \"Content-Type\": \"application/offset+octet-stream\",\n              \"Upload-Offset\": offset.toString(),\n              ...headers2\n            },\n            body: chunk\n          });\n          if (uploadReq.ok) {\n            break;\n          } else {\n            const errorData = await uploadReq.text();\n            throw new Error(`HTTP ${uploadReq.status}: ${errorData}`);\n          }\n        } catch (error) {\n          retryCount++;\n          if (retryCount > maxRetries) {\n            const errorData = uploadReq ? await uploadReq.text().catch(() => \"Unknown error\") : error instanceof Error ? error.message : String(error);\n            throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n              `HTTP error during chunk upload after ${maxRetries} retries: ${errorData}`,\n              uploadReq?.status || 0,\n              {\n                error: errorData,\n                code: \"HTTP_ERROR\",\n                metadata: {\n                  requestUrl: uploadReq?.url || url,\n                  retriesAttempted: maxRetries\n                }\n              }\n            );\n          }\n          const delay = Math.min(1e3 * Math.pow(2, retryCount - 1), 1e4);\n          await new Promise((resolve) => setTimeout(resolve, delay));\n        }\n      }\n      offset += chunk.size;\n    }\n    if (uploadReq.status === 204) {\n      const cid = uploadReq.headers.get(\"upload-cid\");\n      if (!config.pinataJwt) {\n        const data3 = {\n          id: \"\",\n          name: \"\",\n          cid,\n          size: file.size,\n          created_at: \"\",\n          number_of_files: 1,\n          group_id: null,\n          mime_type: \"\",\n          keyvalues: {},\n          vectorized: false,\n          network: \"\"\n        };\n        return data3;\n      }\n      let dataEndpoint;\n      if (config.endpointUrl) {\n        dataEndpoint = config.endpointUrl;\n      } else {\n        dataEndpoint = \"https://api.pinata.cloud/v3\";\n      }\n      const fileInfoReq = await fetch(\n        `${dataEndpoint}/files/${network}?cid=${cid}`,\n        {\n          method: \"GET\",\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      const fileInfo = await fileInfoReq.json();\n      const data2 = fileInfo.data.files[0];\n      if (options?.vectorize) {\n        const vectorReq = await fetch(\n          `${endpoint}/vectorize/files/${data2.id}`,\n          {\n            method: \"POST\",\n            headers: {\n              Authorization: `Bearer ${jwt}`\n            }\n          }\n        );\n        if (vectorReq.ok) {\n          data2.vectorized = true;\n          return data2;\n        } else {\n          const errorData = await vectorReq.text();\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n            `HTTP error during vectorization: ${errorData}`,\n            vectorReq.status,\n            {\n              error: errorData,\n              code: \"HTTP_ERROR\",\n              metadata: {\n                requestUrl: vectorReq.url\n              }\n            }\n          );\n        }\n      }\n      return data2;\n    }\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/file\"\n    };\n  }\n  const data = new FormData();\n  data.append(\"file\", file, file.name);\n  data.append(\"network\", network);\n  data.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  if (options?.streamable) {\n    data.append(\"streamable\", \"true\");\n  }\n  if (options?.url) {\n    try {\n      const request = await fetch(options.url, {\n        method: \"POST\",\n        headers,\n        body: data\n      });\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: request.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      const res = await request.json();\n      const resData = res.data;\n      return resData;\n    } catch (error) {\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        throw error;\n      }\n      if (error instanceof Error) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n          `Error uploading file: ${error.message}`,\n          void 0,\n          {\n            error: error.toString()\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        \"An unknown error occurred while trying to upload file\"\n      );\n    }\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    if (options?.vectorize) {\n      const vectorReq = await fetch(\n        `${endpoint}/vectorize/files/${resData.id}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (vectorReq.ok) {\n        resData.vectorized = true;\n        return resData;\n      } else {\n        const errorData = await vectorReq.text();\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n          `HTTP error during vectorization: ${errorData}`,\n          vectorReq.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n    }\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        `Error uploading file: ${error.message}`,\n        void 0,\n        {\n          error: error.toString()\n        }\n      );\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while trying to upload file\"\n    );\n  }\n};\n\n// src/core/functions/uploads/fileArray.ts\nvar uploadFileArray = async (config, files, network, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const folder = options?.metadata?.name || \"folder_from_sdk\";\n  const data = new FormData();\n  for (const file of Array.from(files)) {\n    const path = file.webkitRelativePath || `${folder}/${file.name}`;\n    data.append(\"file\", file, path);\n  }\n  data.append(\n    \"pinataMetadata\",\n    JSON.stringify({\n      name: folder,\n      keyvalues: options?.metadata?.keyvalues\n    })\n  );\n  data.append(\n    \"pinataOptions\",\n    JSON.stringify({\n      groupId: options?.groupId,\n      cidVersion: 1\n    })\n  );\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/fileArray\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/pinning/pinFileToIPFS\";\n  if (config.legacyUploadUrl) {\n    endpoint = config.legacyUploadUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = {\n      id: res.ID,\n      name: res.Name,\n      cid: res.IpfsHash,\n      size: res.PinSize,\n      created_at: res.Timestamp,\n      number_of_files: res.NumberOfFiles,\n      mime_type: res.MimeType,\n      group_id: res.GroupId,\n      keyvalues: res.Keyvalues,\n      vectorized: false,\n      network: \"public\"\n    };\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing fileArray: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while uploading an array of files\"\n    );\n  }\n};\n\n// src/core/functions/uploads/json.ts\nvar uploadJson = async (config, jsonData, network, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const json = JSON.stringify(jsonData);\n  const blob = new Blob([json]);\n  const file = new File([blob], \"data.json\", { type: \"application/json\" });\n  const data = new FormData();\n  data.append(\"file\", file, file.name);\n  data.append(\"network\", network);\n  data.append(\"name\", options?.metadata?.name || file.name || \"File from SDK\");\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/json\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  if (options?.url) {\n    try {\n      const request = await fetch(options.url, {\n        method: \"POST\",\n        body: data\n      });\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: request.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      const res = await request.json();\n      const resData = res.data;\n      return resData;\n    } catch (error) {\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        throw error;\n      }\n      if (error instanceof Error) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing base64: ${error.message}`);\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        \"An unknown error occurred while trying to upload base64\"\n      );\n    }\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    if (options?.vectorize) {\n      const vectorReq = await fetch(\n        `${endpoint}/vectorize/files/${resData.id}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (vectorReq.ok) {\n        resData.vectorized = true;\n        return resData;\n      } else {\n        const errorData = await vectorReq.text();\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n          `HTTP error during vectorization: ${errorData}`,\n          vectorReq.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n    }\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing json: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while uploading json\");\n  }\n};\n\n// src/core/functions/uploads/url.ts\nvar uploadUrl = async (config, url, network, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  const data = new FormData();\n  const stream = await fetch(url);\n  if (!stream.ok) {\n    const errorData = await stream.text();\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, stream.status, {\n      error: errorData,\n      code: \"HTTP_ERROR\",\n      metadata: {\n        requestUrl: stream.url\n      }\n    });\n  }\n  const arrayBuffer = await stream.arrayBuffer();\n  const blob = new Blob([arrayBuffer]);\n  const name = options?.metadata?.name ?? \"url_upload\";\n  const file = new File([blob], name);\n  data.append(\"file\", file, name);\n  data.append(\"network\", network);\n  data.append(\"name\", name);\n  if (options?.groupId) {\n    data.append(\"group_id\", options.groupId);\n  }\n  if (options?.metadata?.keyvalues) {\n    data.append(\"keyvalues\", JSON.stringify(options.metadata.keyvalues));\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      Source: \"sdk/url\"\n    };\n  }\n  let endpoint = \"https://uploads.pinata.cloud/v3\";\n  if (config.uploadUrl) {\n    endpoint = config.uploadUrl;\n  }\n  if (options?.url) {\n    try {\n      const request = await fetch(options.url, {\n        method: \"POST\",\n        body: data\n      });\n      if (!request.ok) {\n        const errorData = await request.text();\n        if (request.status === 401 || request.status === 403) {\n          throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n            `Authentication failed: ${errorData}`,\n            request.status,\n            {\n              error: errorData,\n              code: \"AUTH_ERROR\",\n              metadata: {\n                requestUrl: request.url\n              }\n            }\n          );\n        }\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n          error: errorData,\n          code: \"HTTP_ERROR\",\n          metadata: {\n            requestUrl: request.url\n          }\n        });\n      }\n      const res = await request.json();\n      const resData = res.data;\n      return resData;\n    } catch (error) {\n      if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n        throw error;\n      }\n      if (error instanceof Error) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing base64: ${error.message}`);\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n        \"An unknown error occurred while trying to upload base64\"\n      );\n    }\n  }\n  try {\n    const request = await fetch(`${endpoint}/files`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    if (options?.vectorize) {\n      const vectorReq = await fetch(\n        `${endpoint}/vectorize/files/${resData.id}`,\n        {\n          method: \"POST\",\n          headers: {\n            Authorization: `Bearer ${jwt}`\n          }\n        }\n      );\n      if (vectorReq.ok) {\n        resData.vectorized = true;\n        return resData;\n      } else {\n        const errorData = await vectorReq.text();\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(\n          `HTTP error during vectorization: ${errorData}`,\n          vectorReq.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n    }\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing url: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while uploading by url\");\n  }\n};\n\n// src/core/functions/uploads/cid.ts\nvar uploadCid = async (config, cid, options) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const jwt = options?.keys || config?.pinataJwt;\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${jwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/cid\"\n    };\n  }\n  const requestBody = {\n    cid,\n    name: options?.metadata ? options?.metadata?.name : cid,\n    keyvalues: options?.metadata?.keyvalues,\n    group_id: options?.groupId,\n    host_nodes: options?.peerAddresses\n  };\n  const data = JSON.stringify(requestBody);\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/public/pin_by_cid`, {\n      method: \"POST\",\n      headers,\n      body: data\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing cid: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\"An unknown error occurred while pinning by CID\");\n  }\n};\n\n// src/core/classes/analytics/Analytics.ts\nvar Analytics = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.requests = new AnalyticsRequests(this.config);\n    this.bandwidth = new AnalyticsBandwidth(this.config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n    this.requests.updateConfig(newConfig);\n    this.bandwidth.updateConfig(newConfig);\n  }\n  summary(options) {\n    return new TimeIntervalAnalyticsBuilder(\n      this.config,\n      options.domain,\n      options.start,\n      options.end,\n      options.interval\n    );\n  }\n};\n\n// src/core/classes/analytics/utils.ts\nvar calculateDates = (days) => {\n  const end = /* @__PURE__ */ new Date();\n  const start = /* @__PURE__ */ new Date();\n  start.setDate(start.getDate() - days);\n  return {\n    start: start.toISOString().split(\"T\")[0],\n    end: end.toISOString().split(\"T\")[0]\n  };\n};\n\n// src/core/classes/analytics/AnalyticsFilter.ts\nvar AnalyticsFilter = class {\n  constructor(config, domain, start, end) {\n    this.config = config;\n    this.query = {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      sort_by: \"requests\",\n      // Will be overridden in child classes\n      attribute: \"cid\"\n    };\n  }\n  cid(cid) {\n    this.query.attribute = \"cid\";\n    if (cid) {\n      this.query.cid = cid;\n    }\n    return this;\n  }\n  fileName(fileName) {\n    this.query.attribute = \"file_name\";\n    if (fileName) {\n      this.query.file_name = fileName;\n    }\n    return this;\n  }\n  userAgent(userAgent) {\n    this.query.attribute = \"user_agent\";\n    if (userAgent) {\n      this.query.user_agent = userAgent;\n    }\n    return this;\n  }\n  country(country) {\n    this.query.attribute = \"country\";\n    if (country) {\n      this.query.country = country;\n    }\n    return this;\n  }\n  region(region) {\n    this.query.attribute = \"region\";\n    if (region) {\n      this.query.region = region;\n    }\n    return this;\n  }\n  referer(referer) {\n    this.query.attribute = \"referer\";\n    if (referer) {\n      this.query.referer = referer;\n    }\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  sort(order) {\n    this.query.sort_order = order;\n    return this;\n  }\n  days(numberOfDays) {\n    const { start, end } = calculateDates(numberOfDays);\n    this.query.start_date = start;\n    this.query.end_date = end;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return analyticsTopUsage(this.config, this.query).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\n\n// src/core/classes/analytics/AnalyticsBandwidth.ts\nvar AnalyticsBandwidth = class extends AnalyticsFilter {\n  constructor(config) {\n    super(config, \"\", \"\", \"\");\n    this.query.sort_by = \"bandwidth\";\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  customDates(start, end) {\n    if (start) this.query.start_date = start;\n    if (end) this.query.end_date = end;\n    return this;\n  }\n  from(domain) {\n    this.query.gateway_domain = domain;\n    return this;\n  }\n};\n\n// src/core/classes/analytics/AnalyticsBuilder.ts\nvar AnalyticsBuilder = class {\n  constructor(config, query) {\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n    this.query = query;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  fileName(fileName) {\n    this.query.file_name = fileName;\n    return this;\n  }\n  userAgent(userAgent) {\n    this.query.user_agent = userAgent;\n    return this;\n  }\n  country(country) {\n    this.query.country = country;\n    return this;\n  }\n  region(region) {\n    this.query.region = region;\n    return this;\n  }\n  referer(referer) {\n    this.query.referer = referer;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  sort(order) {\n    this.query.sort_order = order;\n    return this;\n  }\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async getAnalytics() {\n    throw new Error(\"getAnalytics method must be implemented in derived class\");\n  }\n  then(onfulfilled, onrejected) {\n    return this.getAnalytics().then(onfulfilled, onrejected);\n  }\n};\n\n// src/core/classes/analytics/AnalyticsRequests.ts\nvar AnalyticsRequests = class extends AnalyticsFilter {\n  constructor(config) {\n    super(config, \"\", \"\", \"\");\n    this.query.sort_by = \"requests\";\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  customDates(start, end) {\n    if (start) this.query.start_date = start;\n    if (end) this.query.end_date = end;\n    return this;\n  }\n  from(domain) {\n    this.query.gateway_domain = domain;\n    return this;\n  }\n};\n\n// src/core/classes/analytics/TimeIntervalAnalyticsBuilder.ts\nvar TimeIntervalAnalyticsBuilder = class extends AnalyticsBuilder {\n  constructor(config, domain, start, end, dateInterval) {\n    super(config, {\n      gateway_domain: domain,\n      start_date: start,\n      end_date: end,\n      date_interval: dateInterval\n    });\n  }\n  sortBy(sortBy) {\n    this.query.sort_by = sortBy;\n    return this;\n  }\n  async getAnalytics() {\n    return analyticsDateInterval(this.config, this.query);\n  }\n  async all() {\n    return this.getAnalytics();\n  }\n};\n\n// src/core/classes/groups/GroupsFilter.ts\nvar FilterGroups = class {\n  constructor(config, privacy) {\n    this.query = {};\n    this.config = config;\n    this.privacy = privacy;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  isPublic(isPublic) {\n    this.query.isPublic = isPublic;\n    return this;\n  }\n  pageToken(pageToken) {\n    this.query.pageToken = pageToken;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return this.fetchPage().then((response) => {\n      this.nextPageToken = response.next_page_token;\n      return response;\n    }).then(onfulfilled, onrejected);\n  }\n  async fetchPage() {\n    if (this.nextPageToken) {\n      this.query.pageToken = this.nextPageToken;\n    }\n    return listGroups(this.config, this.privacy, this.query);\n  }\n  // rate limit, hopefully temporary?\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      const response = await this.fetchPage();\n      for (const item of response.groups) {\n        yield item;\n      }\n      if (!response.next_page_token) {\n        break;\n      }\n      this.nextPageToken = response.next_page_token;\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\n\n// src/core/classes/groups/PublicGroups.ts\nvar PublicGroups = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createGroup(this.config, options, \"public\");\n  }\n  list() {\n    return new FilterGroups(this.config, \"public\");\n  }\n  get(options) {\n    return getGroup(this.config, options, \"public\");\n  }\n  addFiles(options) {\n    return addToGroup(this.config, options, \"public\");\n  }\n  removeFiles(options) {\n    return removeFromGroup(this.config, options, \"public\");\n  }\n  update(options) {\n    return updateGroup(this.config, options, \"public\");\n  }\n  delete(options) {\n    return deleteGroup(this.config, options, \"public\");\n  }\n};\n\n// src/core/classes/groups/PrivateGroups.ts\nvar PrivateGroups = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createGroup(this.config, options, \"private\");\n  }\n  list() {\n    return new FilterGroups(this.config, \"private\");\n  }\n  get(options) {\n    return getGroup(this.config, options, \"private\");\n  }\n  addFiles(options) {\n    return addToGroup(this.config, options, \"private\");\n  }\n  removeFiles(options) {\n    return removeFromGroup(this.config, options, \"private\");\n  }\n  update(options) {\n    return updateGroup(this.config, options, \"private\");\n  }\n  delete(options) {\n    return deleteGroup(this.config, options, \"private\");\n  }\n};\n\n// src/core/classes/groups/Groups.ts\nvar Groups = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.public = new PublicGroups(config);\n    this.private = new PrivateGroups(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n};\n\n// src/core/classes/keys/Keys.ts\nvar Keys = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  create(options) {\n    return createKey(this.config, options);\n  }\n  list() {\n    return new FilterKeys(this.config);\n  }\n  revoke(keys) {\n    return revokeKeys(this.config, keys);\n  }\n};\n\n// src/core/classes/keys/FilterKeys.ts\nvar FilterKeys = class {\n  // rate limit vars\n  // private requestCount = 0;\n  // private lastRequestTime = 0;\n  // private readonly MAX_REQUESTS_PER_MINUTE = 30;\n  // private readonly MINUTE_IN_MS = 60000;\n  constructor(config) {\n    this.query = {};\n    this.config = config;\n  }\n  offset(offset) {\n    this.query.offset = offset;\n    return this;\n  }\n  revoked(revoked) {\n    this.query.revoked = revoked;\n    return this;\n  }\n  limitedUse(limitedUse) {\n    this.query.limitedUse = limitedUse;\n    return this;\n  }\n  exhausted(exhausted) {\n    this.query.exhausted = exhausted;\n    return this;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return listKeys(this.config, this.query).then(onfulfilled, onrejected);\n  }\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    let hasMore = true;\n    let offset = 0;\n    while (hasMore) {\n      this.query.offset = offset;\n      const items = await listKeys(this.config, this.query);\n      for (const item of items) {\n        yield item;\n      }\n      if (items.length === 0) {\n        hasMore = false;\n      } else {\n        offset += items.length;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\n\n// src/core/classes/gateways/Gateways.ts\nvar Gateways = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.public = new PublicGateways(config);\n    this.private = new PrivateGateways(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n};\n\n// src/core/classes/gateways/OptimizeImageCreateSignedUrl.ts\nvar OptimizeImageCreateAccessLink = class {\n  constructor(config, urlOpts) {\n    this.imgOpts = {};\n    this.config = config;\n    this.urlOpts = urlOpts;\n  }\n  optimizeImage(options) {\n    this.imgOpts = { ...this.imgOpts, ...options };\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return createAccessLink(this.config, this.urlOpts, this.imgOpts).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\n\n// src/core/classes/gateways/OptimizeImageGetCid.ts\nvar OptimizeImageGetCid = class {\n  constructor(config, cid, gatewayType) {\n    this.options = {};\n    this.config = config;\n    this.cid = cid;\n    this.gatewayType = gatewayType;\n  }\n  optimizeImage(options) {\n    this.options = { ...this.options, ...options };\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return getCid(this.config, this.cid, this.gatewayType, this.options).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\n\n// src/core/classes/gateways/PrivateGateways.ts\nvar PrivateGateways = class {\n  constructor(config) {\n    this.config = config;\n  }\n  get(cid) {\n    return new OptimizeImageGetCid(this.config, cid, \"files\");\n  }\n  createAccessLink(options) {\n    return new OptimizeImageCreateAccessLink(this.config, options);\n  }\n};\n\n// src/core/classes/gateways/PublicGateways.ts\nvar PublicGateways = class {\n  constructor(config) {\n    this.config = config;\n  }\n  get(cid) {\n    return new OptimizeImageGetCid(this.config, cid, \"ipfs\");\n  }\n  convert(url, gatewayPrefix) {\n    return convertIPFSUrl(this.config, url, gatewayPrefix);\n  }\n};\n\n// src/core/functions/files/getFile.ts\nvar getFile = async (config, id, privacy) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      ...config.customHeaders\n    };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getFile\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(`${endpoint}/files/${privacy}/${id}`, {\n      method: \"GET\",\n      headers\n    });\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    const resData = res.data;\n    return resData;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing getGroup: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while getting info for a group\"\n    );\n  }\n};\n\n// src/core/classes/files/FilterFiles.ts\nvar FilterFiles = class {\n  // rate limit vars\n  // private requestCount = 0;\n  // private lastRequestTime = 0;\n  // private readonly MAX_REQUESTS_PER_MINUTE = 30;\n  // private readonly MINUTE_IN_MS = 60000;\n  constructor(config, privacy) {\n    this.query = {};\n    this.config = config;\n    this.privacy = privacy;\n  }\n  name(name) {\n    this.query.name = name;\n    return this;\n  }\n  group(group) {\n    this.query.group = group;\n    return this;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  mimeType(mimeType) {\n    this.query.mimeType = mimeType;\n    return this;\n  }\n  order(order) {\n    this.query.order = order;\n    return this;\n  }\n  limit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  cidPending(cidPending) {\n    this.query.cidPending = cidPending;\n    return this;\n  }\n  keyvalues(keyvalues) {\n    this.query.metadata = keyvalues;\n    return this;\n  }\n  noGroup(noGroup) {\n    this.query.noGroup = noGroup;\n    return this;\n  }\n  pageToken(pageToken) {\n    this.query.pageToken = pageToken;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return this.fetchPage().then(onfulfilled, onrejected);\n  }\n  async fetchPage() {\n    if (this.currentPageToken) {\n      this.query.pageToken = this.currentPageToken;\n    }\n    const response = await listFiles(this.config, this.privacy, this.query);\n    this.currentPageToken = response.next_page_token;\n    return response;\n  }\n  // // rate limit, hopefully temporary?\n  // private async rateLimit(): Promise<void> {\n  // \tthis.requestCount++;\n  // \tconst now = Date.now();\n  // \tif (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n  // \t\tconst timePassedSinceLastRequest = now - this.lastRequestTime;\n  // \t\tif (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n  // \t\t\tconst delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n  // \t\t\tawait new Promise((resolve) => setTimeout(resolve, delayTime));\n  // \t\t}\n  // \t\tthis.requestCount = 0;\n  // \t}\n  // \tthis.lastRequestTime = Date.now();\n  // }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      const items = await this.fetchPage();\n      for (const item of items.files) {\n        yield item;\n      }\n      if (!this.currentPageToken) {\n        break;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\n\n// src/core/classes/files/FilterQueue.ts\nvar FilterQueue = class {\n  constructor(config) {\n    this.query = {};\n    // rate limit vars\n    this.requestCount = 0;\n    this.lastRequestTime = 0;\n    this.MAX_REQUESTS_PER_MINUTE = 30;\n    this.MINUTE_IN_MS = 6e4;\n    this.config = config;\n  }\n  cid(cid) {\n    this.query.cid = cid;\n    return this;\n  }\n  status(status) {\n    this.query.status = status;\n    return this;\n  }\n  pageLimit(limit) {\n    this.query.limit = limit;\n    return this;\n  }\n  pageToken(pageToken) {\n    this.query.pageToken = pageToken;\n    return this;\n  }\n  async fetchPage() {\n    if (this.currentPageToken) {\n      this.query.pageToken = this.currentPageToken;\n    }\n    const response = await queue(this.config, this.query);\n    this.currentPageToken = response.next_page_token;\n    return response;\n  }\n  sort(sort) {\n    this.query.sort = sort;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    return queue(this.config, this.query).then(onfulfilled, onrejected);\n  }\n  // rate limit, hopefully temporary?\n  async rateLimit() {\n    this.requestCount++;\n    const now = Date.now();\n    if (this.requestCount >= this.MAX_REQUESTS_PER_MINUTE) {\n      const timePassedSinceLastRequest = now - this.lastRequestTime;\n      if (timePassedSinceLastRequest < this.MINUTE_IN_MS) {\n        const delayTime = this.MINUTE_IN_MS - timePassedSinceLastRequest;\n        await new Promise((resolve) => setTimeout(resolve, delayTime));\n      }\n      this.requestCount = 0;\n    }\n    this.lastRequestTime = Date.now();\n  }\n  async *[Symbol.asyncIterator]() {\n    while (true) {\n      const items = await this.fetchPage();\n      for (const item of items.jobs) {\n        yield item;\n      }\n      if (!this.currentPageToken) {\n        break;\n      }\n    }\n  }\n  async all() {\n    const allItems = [];\n    for await (const item of this) {\n      allItems.push(item);\n    }\n    return allItems;\n  }\n};\n\n// src/core/classes/files/PublicFiles.ts\nvar PublicFiles = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  list() {\n    return new FilterFiles(this.config, \"public\");\n  }\n  get(id) {\n    return getFile(this.config, id, \"public\");\n  }\n  delete(files) {\n    return deleteFile(this.config, files, \"public\");\n  }\n  update(options) {\n    return updateFile(this.config, options, \"public\");\n  }\n  addSwap(options) {\n    return swapCid(this.config, options, \"public\");\n  }\n  getSwapHistory(options) {\n    return swapHistory(this.config, options, \"public\");\n  }\n  deleteSwap(cid) {\n    return deleteSwap(this.config, cid, \"public\");\n  }\n  queue() {\n    return new FilterQueue(this.config);\n  }\n  deletePinRequest(requestId) {\n    return deletePinRequest(this.config, requestId);\n  }\n};\n\n// src/core/classes/files/PrivateFiles.ts\nvar PrivateFiles = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  list() {\n    return new FilterFiles(this.config, \"private\");\n  }\n  get(id) {\n    return getFile(this.config, id, \"private\");\n  }\n  delete(files) {\n    return deleteFile(this.config, files, \"private\");\n  }\n  update(options) {\n    return updateFile(this.config, options, \"private\");\n  }\n  addSwap(options) {\n    return swapCid(this.config, options, \"private\");\n  }\n  getSwapHistory(options) {\n    return swapHistory(this.config, options, \"private\");\n  }\n  deleteSwap(cid) {\n    return deleteSwap(this.config, cid, \"private\");\n  }\n  vectorize(fileId) {\n    return vectorizeFile(this.config, fileId);\n  }\n  queryVectors(options) {\n    return vectorizeQuery(this.config, options);\n  }\n  deleteVectors(fileId) {\n    return deleteFileVectors(this.config, fileId);\n  }\n};\n\n// src/core/classes/files/Files.ts\nvar Files = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.public = new PublicFiles(config);\n    this.private = new PrivateFiles(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n};\n\n// src/core/classes/uploads/UploadBuilder.ts\nvar UploadBuilder = class {\n  constructor(config, uploadFunction, ...args) {\n    this.metadata = {};\n    this.config = config;\n    this.uploadFunction = uploadFunction;\n    this.args = args;\n  }\n  // Replace addMetadata with these two methods:\n  name(name) {\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    this.metadata.name = name;\n    return this;\n  }\n  keyvalues(keyvalues) {\n    if (!this.metadata) {\n      this.metadata = {};\n    }\n    this.metadata.keyvalues = keyvalues;\n    return this;\n  }\n  key(jwt) {\n    this.keys = jwt;\n    return this;\n  }\n  vectorize() {\n    this.vector = true;\n    return this;\n  }\n  url(url) {\n    this.uploadUrl = url;\n    return this;\n  }\n  // cidVersion(v: 0 | 1): UploadBuilder<T> {\n  // \tthis.version = v;\n  // \treturn this;\n  // }\n  group(groupId) {\n    this.groupId = groupId;\n    return this;\n  }\n  streamable() {\n    this.isStreamable = true;\n    return this;\n  }\n  peerAddress(peerAddresses) {\n    this.peerAddresses = peerAddresses;\n    return this;\n  }\n  then(onfulfilled, onrejected) {\n    const options = this.args[this.args.length - 1] || {};\n    if (this.metadata) {\n      options.metadata = this.metadata;\n    }\n    if (this.keys) {\n      options.keys = this.keys;\n    }\n    if (this.groupId) {\n      options.groupId = this.groupId;\n    }\n    if (this.vector) {\n      options.vectorize = this.vector;\n    }\n    if (this.uploadUrl) {\n      options.url = this.uploadUrl;\n    }\n    if (this.isStreamable) {\n      options.streamable = this.isStreamable;\n    }\n    if (this.peerAddresses) {\n      options.peerAddresses = this.peerAddresses;\n    }\n    this.args[this.args.length - 1] = options;\n    return this.uploadFunction(this.config, ...this.args).then(\n      onfulfilled,\n      onrejected\n    );\n  }\n};\n\n// src/core/classes/uploads/PublicUpload.ts\nvar PublicUpload = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  file(file, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, file2, options2) => uploadFile(config, file2, \"public\", options2),\n      file,\n      options\n    );\n  }\n  fileArray(files, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, file, options2) => uploadFileArray(config, file, \"public\", options2),\n      files,\n      options\n    );\n  }\n  base64(base64String, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, base64String2, options2) => uploadBase64(config, base64String2, \"public\", options2),\n      base64String,\n      options\n    );\n  }\n  url(url, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, url2, options2) => uploadUrl(config, url2, \"public\", options2),\n      url,\n      options\n    );\n  }\n  json(data, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, data2, options2) => uploadJson(config, data2, \"public\", options2),\n      data,\n      options\n    );\n  }\n  cid(cid, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, cid2, options2) => uploadCid(config, cid2, options2),\n      cid,\n      options\n    );\n  }\n  createSignedURL(options) {\n    return createSignedUploadURL(this.config, options, \"public\");\n  }\n};\n\n// src/core/classes/uploads/PrivateUpload.ts\nvar PrivateUpload = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  file(file, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, file2, options2) => uploadFile(config, file2, \"private\", options2),\n      file,\n      options\n    );\n  }\n  // Reserved for future release\n  // fileArray(\n  // \tfiles: FileObject[],\n  // \toptions?: UploadOptions,\n  // ): UploadBuilder<UploadResponse> {\n  // \treturn new UploadBuilder(\n  // \t\tthis.config,\n  // \t\t(config, file, options) =>\n  // \t\t\tuploadFileArray(config, file, \"private\", options),\n  // \t\tfiles,\n  // \t\toptions,\n  // \t);\n  // }\n  base64(base64String, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, base64String2, options2) => uploadBase64(config, base64String2, \"private\", options2),\n      base64String,\n      options\n    );\n  }\n  url(url, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, url2, options2) => uploadUrl(config, url2, \"private\", options2),\n      url,\n      options\n    );\n  }\n  json(data, options) {\n    return new UploadBuilder(\n      this.config,\n      (config, data2, options2) => uploadJson(config, data2, \"private\", options2),\n      data,\n      options\n    );\n  }\n  createSignedURL(options) {\n    return createSignedUploadURL(this.config, options, \"private\");\n  }\n};\n\n// src/core/classes/uploads/Upload.ts\nvar Upload = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.public = new PublicUpload(config);\n    this.private = new PrivateUpload(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n};\n\n// src/core/functions/signatures/addSignature.ts\nvar addSignature = async (config, options, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  const data = JSON.stringify({\n    signature: options.signature,\n    address: options.address\n  });\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/addSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/${network}/signature/${options.cid}`,\n      {\n        method: \"POST\",\n        headers,\n        body: data\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      if (request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n          \"Unauthorized signing, you must be the original owner of the file and it must not have a signature\",\n          request.status,\n          {\n            error: errorData,\n            code: \"HTTP_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing addSignature: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while adding signature to CID\"\n    );\n  }\n};\n\n// src/core/functions/signatures/getSignature.ts\nvar getSignature = async (config, cid, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/getSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/${network}/signature/${cid}`,\n      {\n        method: \"GET\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    const res = await request.json();\n    return res.data;\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing getSignature: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while fetching signature for CID\"\n    );\n  }\n};\n\n// src/core/functions/signatures/removeSignature.ts\nvar removeSignature = async (config, cid, network) => {\n  if (!config) {\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.ValidationError(\"Pinata configuration is missing\");\n  }\n  let headers;\n  if (config.customHeaders && Object.keys(config.customHeaders).length > 0) {\n    headers = { ...config.customHeaders };\n  } else {\n    headers = {\n      Authorization: `Bearer ${config.pinataJwt}`,\n      \"Content-Type\": \"application/json\",\n      Source: \"sdk/removeSignature\"\n    };\n  }\n  let endpoint = \"https://api.pinata.cloud/v3\";\n  if (config.endpointUrl) {\n    endpoint = config.endpointUrl;\n  }\n  try {\n    const request = await fetch(\n      `${endpoint}/files/${network}/signature/${cid}`,\n      {\n        method: \"DELETE\",\n        headers\n      }\n    );\n    if (!request.ok) {\n      const errorData = await request.text();\n      if (request.status === 401 || request.status === 403) {\n        throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.AuthenticationError(\n          `Authentication failed: ${errorData}`,\n          request.status,\n          {\n            error: errorData,\n            code: \"AUTH_ERROR\",\n            metadata: {\n              requestUrl: request.url\n            }\n          }\n        );\n      }\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.NetworkError(`HTTP error: ${errorData}`, request.status, {\n        error: errorData,\n        code: \"HTTP_ERROR\",\n        metadata: {\n          requestUrl: request.url\n        }\n      });\n    }\n    return \"OK\";\n  } catch (error) {\n    if (error instanceof _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError) {\n      throw error;\n    }\n    if (error instanceof Error) {\n      throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(`Error processing addSignature: ${error.message}`);\n    }\n    throw new _chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.PinataError(\n      \"An unknown error occurred while adding signature to CID\"\n    );\n  }\n};\n\n// src/core/classes/signatures/PublicSignatures.ts\nvar PublicSignatures = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n  add(options) {\n    return addSignature(this.config, options, \"public\");\n  }\n  get(cid) {\n    return getSignature(this.config, cid, \"public\");\n  }\n  delete(cid) {\n    return removeSignature(this.config, cid, \"public\");\n  }\n};\n\n// src/core/classes/signatures/Signatures.ts\nvar Signatures = class {\n  //private: PrivateSignatures\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.public = new PublicSignatures(config);\n  }\n  updateConfig(newConfig) {\n    this.config = newConfig;\n  }\n};\n\n// src/core/pinataSDK.ts\nvar PinataSDK = class {\n  constructor(config) {\n    this.config = (0,_chunk_ME652TQB_mjs__WEBPACK_IMPORTED_MODULE_0__.formatConfig)(config);\n    this.files = new Files(this.config);\n    this.upload = new Upload(this.config);\n    this.gateways = new Gateways(this.config);\n    this.keys = new Keys(this.config);\n    this.groups = new Groups(this.config);\n    this.analytics = new Analytics(this.config);\n    this.signatures = new Signatures(this.config);\n  }\n  setNewHeaders(headers) {\n    if (!this.config) {\n      this.config = { pinataJwt: \"\", customHeaders: {} };\n    }\n    this.config.customHeaders = { ...this.config.customHeaders, ...headers };\n    this.files.updateConfig(this.config);\n    this.upload.updateConfig(this.config);\n    this.gateways.updateConfig(this.config);\n    this.keys.updateConfig(this.config);\n    this.groups.updateConfig(this.config);\n    this.analytics.updateConfig(this.config);\n    this.signatures.updateConfig(this.config);\n  }\n  setNewJwt(jwt) {\n    if (!this.config) {\n      this.config = { pinataJwt: \"\" };\n    }\n    this.config.pinataJwt = jwt;\n    this.files.updateConfig(this.config);\n    this.upload.updateConfig(this.config);\n    this.gateways.updateConfig(this.config);\n    this.keys.updateConfig(this.config);\n    this.groups.updateConfig(this.config);\n    this.analytics.updateConfig(this.config);\n    this.signatures.updateConfig(this.config);\n  }\n  testAuthentication() {\n    return testAuthentication(this.config);\n  }\n};\n\n\n//# sourceMappingURL=index.mjs.map\n//# sourceMappingURL=index.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/pinata/dist/index.mjs\n");

/***/ })

};
;